<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
namespace <#= Model.Namespace #>.Core.Common.Security
{
    using System;
    using System.IdentityModel.Services;
    using System.IdentityModel.Tokens;
    using System.Linq;
    using System.Security.Claims;
    using System.Web;
    using System.Web.Mvc;
    using Interfaces.Service;

    public partial class ClaimsTransformer : ClaimsAuthenticationManager
    {
        partial void SetCustomPrincipalClaims(IUserService userService, ref ClaimsPrincipal principal);

        public override ClaimsPrincipal Authenticate(string resourceName, ClaimsPrincipal incomingPrincipal)
        {
            if (!incomingPrincipal.Identity.IsAuthenticated)
            {
                return incomingPrincipal;
            }

            try
            {
                var newPrincipal = Transform(incomingPrincipal);

                EstablishSession(newPrincipal);

                return newPrincipal;
            }
            catch (InvalidOperationException)
            {
                var authenticationService = DependencyResolver.Current.GetService<IAuthenticationService>();
                authenticationService.SignOut();
            }

            return null;
        }

        ClaimsPrincipal Transform(ClaimsPrincipal incomingPrincipal)
        {
            var nameClaim = incomingPrincipal.Identities.First().FindFirst(ClaimTypes.Name);

            var userService = DependencyResolver.Current.GetService<IUserService>();

            var user = userService.GetByUsername(nameClaim.Value);

            if (user == null)
            {
                throw new InvalidOperationException("Cannot initialize user");
            }

            var id = new ApplicationIdentity(user);

            var principal = new ClaimsPrincipal(id);

            SetCustomPrincipalClaims(userService, ref principal);

            return principal;
        }        

        private void EstablishSession(ClaimsPrincipal principal)
        {
            if (HttpContext.Current != null)
            {
                var sessionToken = new SessionSecurityToken(principal);
                FederatedAuthentication.SessionAuthenticationModule.WriteSessionTokenToCookie(sessionToken);
            }
        }
    }
}
